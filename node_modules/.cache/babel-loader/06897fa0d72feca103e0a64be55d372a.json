{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91727\\\\Desktop\\\\milina\\\\starter-antd-admin-crud-auth-mern-master\\\\frontend\\\\src\\\\modules\\\\CustomCrudModule\\\\DataTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Dropdown, Button, PageHeader, Table, Input } from \"antd\";\nimport { EllipsisOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { selectListItems } from \"@/redux/crud/selectors\";\nimport uniqueId from \"@/utils/uinqueId\";\nimport inverseColor from \"@/utils/inverseColor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function DataTable(_ref) {\n  _s();\n\n  let {\n    config,\n    DropDownRowMenu,\n    AddNewItem\n  } = _ref;\n  const inputColorRef = useRef(null);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [tableItemsList, setTableItemsList] = useState([]);\n  const [coloredRow, setColoredRow] = useState({});\n\n  const openColorBox = () => {\n    inputColorRef.current.click();\n  };\n\n  const handelColorChange = e => {\n    const tmpObj = {};\n    const tmpColoredRows = selectedRowKeys.map(x => {\n      tmpObj[x] = e.target.value;\n    });\n    setColoredRow({ ...coloredRow,\n      ...tmpObj\n    });\n    setSelectedRowKeys([]);\n  };\n\n  function MakeNewColor() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        display: \"inline-block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: openColorBox,\n        children: \"Make new Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        ref: inputColorRef,\n        onChange: handelColorChange,\n        style: {\n          opacity: 0,\n          position: \"absolute\",\n          left: 0,\n          top: \"10px\",\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n  let {\n    entity,\n    dataTableColumns,\n    dataTableTitle\n  } = config;\n  const newDataTableColumns = dataTableColumns.map(obj => ({ ...obj,\n    render: (text, row) => {\n      return {\n        props: {\n          style: {\n            background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\n            color: coloredRow[row._id] ? inverseColor(coloredRow[row._id]) : \"\"\n          }\n        },\n        children: text\n      };\n    }\n  }));\n  dataTableColumns = [...newDataTableColumns, {\n    title: \"\",\n    render: row => {\n      return {\n        props: {\n          style: {\n            background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\n            color: coloredRow[row._id] ? inverseColor(coloredRow[row._id]) : \"\"\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          overlay: DropDownRowMenu({\n            row\n          }),\n          trigger: [\"click\"],\n          children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {\n            style: {\n              cursor: \"pointer\",\n              fontSize: \"24px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      };\n    }\n  }];\n  const {\n    result: listResult,\n    isLoading: listIsLoading\n  } = useSelector(selectListItems);\n  const {\n    pagination,\n    items\n  } = listResult;\n  const dispatch = useDispatch();\n  const handelDataTableLoad = useCallback(pagination => {\n    dispatch(crud.list(entity, pagination.current));\n  }, []);\n  useEffect(() => {\n    dispatch(crud.list(entity));\n  }, []);\n  useEffect(() => {\n    const listIds = items.map(x => x._id);\n    setTableItemsList(listIds);\n  }, [items]);\n  const [firstRow, setFirstRow] = useState();\n  const [onSelect, setSelect] = useState(false);\n\n  const onClickRow = (record, rowIndex) => {\n    return {\n      onClick: () => {// const exist = selectedRowKeys.includes(record._id);\n        // if (exist) {\n        //   let filtered = selectedRowKeys.filter(function (value) {\n        //     return value != record._id;\n        //   });\n        //   setSelectedRowKeys(filtered);\n        // } else {\n        //   setSelectedRowKeys([...selectedRowKeys, record._id]);\n        // }\n      },\n      onMouseDown: () => {\n        setFirstRow(rowIndex);\n        setSelectedRowKeys([record._id]);\n        setSelect(true);\n      },\n      onMouseEnter: () => {\n        if (onSelect) {\n          const selectedRange = tableItemsList.slice(firstRow, rowIndex + 1);\n          setSelectedRowKeys(selectedRange);\n        }\n      },\n      onMouseUp: () => {\n        setSelect(false);\n      }\n    };\n  };\n\n  const handelColorRow = (checked, record, index, originNode) => {\n    return {\n      props: {\n        style: {\n          background: coloredRow[record._id] ? coloredRow[record._id] : \"\"\n        }\n      } // children: originNode,\n\n    };\n  };\n\n  const onSelectChange = (selectedKeys, selectedRows) => {\n    setSelectedRowKeys(selectedKeys);\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n    hideSelectAll: true,\n    columnWidth: 0,\n    renderCell: handelColorRow,\n    selectedRowKeys: selectedRowKeys\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      onBack: () => window.history.back(),\n      title: dataTableTitle,\n      ghost: false,\n      extra: [/*#__PURE__*/_jsxDEV(MakeNewColor, {\n        config: config\n      }, `${uniqueId()}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handelDataTableLoad,\n        children: \"Refresh\"\n      }, `${uniqueId()}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddNewItem, {\n        config: config\n      }, `${uniqueId()}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)],\n      style: {\n        padding: \"20px 0px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: dataTableColumns,\n      rowKey: item => item._id,\n      rowSelection: rowSelection,\n      onRow: onClickRow,\n      ellipsis: true // rowClassName={setRowClassName}\n      ,\n      size: \"small\",\n      dataSource: items,\n      pagination: pagination,\n      loading: listIsLoading,\n      onChange: handelDataTableLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DataTable, \"eC1O8xxrrInc8HjtwZ/d+usRKKE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = DataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"sources":["C:/Users/91727/Desktop/milina/starter-antd-admin-crud-auth-mern-master/frontend/src/modules/CustomCrudModule/DataTable.jsx"],"names":["React","useCallback","useEffect","useState","useRef","Dropdown","Button","PageHeader","Table","Input","EllipsisOutlined","useSelector","useDispatch","crud","selectListItems","uniqueId","inverseColor","DataTable","config","DropDownRowMenu","AddNewItem","inputColorRef","selectedRowKeys","setSelectedRowKeys","tableItemsList","setTableItemsList","coloredRow","setColoredRow","openColorBox","current","click","handelColorChange","e","tmpObj","tmpColoredRows","map","x","target","value","MakeNewColor","position","display","opacity","left","top","width","entity","dataTableColumns","dataTableTitle","newDataTableColumns","obj","render","text","row","props","style","background","_id","color","children","title","cursor","fontSize","result","listResult","isLoading","listIsLoading","pagination","items","dispatch","handelDataTableLoad","list","listIds","firstRow","setFirstRow","onSelect","setSelect","onClickRow","record","rowIndex","onClick","onMouseDown","onMouseEnter","selectedRange","slice","onMouseUp","handelColorRow","checked","index","originNode","onSelectChange","selectedKeys","selectedRows","console","log","rowSelection","onChange","hideSelectAll","columnWidth","renderCell","window","history","back","padding","item"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Dropdown, Button, PageHeader, Table, Input } from \"antd\";\n\nimport { EllipsisOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { selectListItems } from \"@/redux/crud/selectors\";\n\nimport uniqueId from \"@/utils/uinqueId\";\nimport inverseColor from \"@/utils/inverseColor\";\n\nexport default function DataTable({ config, DropDownRowMenu, AddNewItem }) {\n  const inputColorRef = useRef(null);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [tableItemsList, setTableItemsList] = useState([]);\n  const [coloredRow, setColoredRow] = useState({});\n\n  const openColorBox = () => {\n    inputColorRef.current.click();\n  };\n  const handelColorChange = (e) => {\n    const tmpObj = {};\n    const tmpColoredRows = selectedRowKeys.map((x) => {\n      tmpObj[x] = e.target.value;\n    });\n\n    setColoredRow({ ...coloredRow, ...tmpObj });\n    setSelectedRowKeys([]);\n  };\n  function MakeNewColor() {\n    return (\n      <div style={{ position: \"relative\", display: \"inline-block\" }}>\n        <Button onClick={openColorBox}>Make new Color</Button>\n        <input\n          type=\"color\"\n          ref={inputColorRef}\n          onChange={handelColorChange}\n          style={{\n            opacity: 0,\n            position: \"absolute\",\n            left: 0,\n            top: \"10px\",\n            width: \"100%\",\n          }}\n        />\n      </div>\n    );\n  }\n  let { entity, dataTableColumns, dataTableTitle } = config;\n  const newDataTableColumns = dataTableColumns.map((obj) => ({\n    ...obj,\n    render: (text, row) => {\n      return {\n        props: {\n          style: {\n            background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\n            color: coloredRow[row._id] ? inverseColor(coloredRow[row._id]) : \"\",\n          },\n        },\n        children: text,\n      };\n    },\n  }));\n  dataTableColumns = [\n    ...newDataTableColumns,\n    {\n      title: \"\",\n      render: (row) => {\n        return {\n          props: {\n            style: {\n              background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\n              color: coloredRow[row._id]\n                ? inverseColor(coloredRow[row._id])\n                : \"\",\n            },\n          },\n          children: (\n            <Dropdown overlay={DropDownRowMenu({ row })} trigger={[\"click\"]}>\n              <EllipsisOutlined\n                style={{ cursor: \"pointer\", fontSize: \"24px\" }}\n              />\n            </Dropdown>\n          ),\n        };\n      },\n    },\n  ];\n\n  const { result: listResult, isLoading: listIsLoading } =\n    useSelector(selectListItems);\n\n  const { pagination, items } = listResult;\n\n  const dispatch = useDispatch();\n\n  const handelDataTableLoad = useCallback((pagination) => {\n    dispatch(crud.list(entity, pagination.current));\n  }, []);\n\n  useEffect(() => {\n    dispatch(crud.list(entity));\n  }, []);\n\n  useEffect(() => {\n    const listIds = items.map((x) => x._id);\n    setTableItemsList(listIds);\n  }, [items]);\n\n  const [firstRow, setFirstRow] = useState();\n\n  const [onSelect, setSelect] = useState(false);\n  const onClickRow = (record, rowIndex) => {\n    return {\n      onClick: () => {\n        // const exist = selectedRowKeys.includes(record._id);\n        // if (exist) {\n        //   let filtered = selectedRowKeys.filter(function (value) {\n        //     return value != record._id;\n        //   });\n        //   setSelectedRowKeys(filtered);\n        // } else {\n        //   setSelectedRowKeys([...selectedRowKeys, record._id]);\n        // }\n      },\n      onMouseDown: () => {\n        setFirstRow(rowIndex);\n        setSelectedRowKeys([record._id]);\n        setSelect(true);\n      },\n      onMouseEnter: () => {\n        if (onSelect) {\n          const selectedRange = tableItemsList.slice(firstRow, rowIndex + 1);\n          setSelectedRowKeys(selectedRange);\n        }\n      },\n      onMouseUp: () => {\n        setSelect(false);\n      },\n    };\n  };\n\n  const handelColorRow = (checked, record, index, originNode) => {\n    return {\n      props: {\n        style: {\n          background: coloredRow[record._id] ? coloredRow[record._id] : \"\",\n        },\n      },\n      // children: originNode,\n    };\n  };\n\n  const onSelectChange = (selectedKeys, selectedRows) => {\n    setSelectedRowKeys(selectedKeys);\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n    hideSelectAll: true,\n    columnWidth: 0,\n\n    renderCell: handelColorRow,\n    selectedRowKeys: selectedRowKeys,\n  };\n\n  return (\n    <>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={dataTableTitle}\n        ghost={false}\n        extra={[\n          <MakeNewColor key={`${uniqueId()}`} config={config} />,\n          <Button onClick={handelDataTableLoad} key={`${uniqueId()}`}>\n            Refresh\n          </Button>,\n          <AddNewItem key={`${uniqueId()}`} config={config} />,\n        ]}\n        style={{\n          padding: \"20px 0px\",\n        }}\n      ></PageHeader>\n      <Table\n        columns={dataTableColumns}\n        rowKey={(item) => item._id}\n        rowSelection={rowSelection}\n        onRow={onClickRow}\n        ellipsis={true}\n        // rowClassName={setRowClassName}\n        size={\"small\"}\n        dataSource={items}\n        pagination={pagination}\n        loading={listIsLoading}\n        onChange={handelDataTableLoad}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}