{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91727\\\\Desktop\\\\milina\\\\starter-antd-admin-crud-auth-mern-master\\\\frontend\\\\src\\\\components\\\\DeleteModal\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Modal } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectDeletedItem } from \"@/redux/crud/selectors\";\nimport { valueByString } from \"@/utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DeleteModal(_ref) {\n  _s();\n\n  let {\n    config\n  } = _ref;\n  let {\n    entity,\n    entityDisplayLabels,\n    deleteMessage = \"Do you want delete : \",\n    modalTitle = \"Remove Item\"\n  } = config;\n  const dispatch = useDispatch();\n  const {\n    current,\n    isLoading,\n    isSuccess\n  } = useSelector(selectDeletedItem);\n  const {\n    state,\n    crudContextAction\n  } = useCrudContext();\n  const {\n    isModalOpen\n  } = state;\n  const {\n    modal\n  } = crudContextAction;\n  const [displayItem, setDisplayItem] = useState(\"\");\n  useEffect(() => {\n    if (isSuccess) {\n      modal.close();\n      dispatch(crud.list(entity));\n      dispatch(crud.resetAction(entity));\n    }\n\n    if (current) {\n      let labels = entityDisplayLabels.map(x => valueByString(current, x)).join(\" \");\n      setDisplayItem(labels);\n    }\n  }, [isSuccess, current]);\n\n  const handleOk = () => {\n    const id = current._id;\n    dispatch(crud.delete(entity, id));\n  };\n\n  const handleCancel = () => {\n    if (!isLoading) modal.close();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: modalTitle,\n    visible: isModalOpen,\n    onOk: handleOk,\n    onCancel: handleCancel,\n    confirmLoading: isLoading,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [deleteMessage, displayItem]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeleteModal, \"l/fpjjMx5KOA8klHnr2zUx0U/GM=\", false, function () {\n  return [useDispatch, useSelector, useCrudContext];\n});\n\n_c = DeleteModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteModal\");","map":{"version":3,"sources":["C:/Users/91727/Desktop/milina/starter-antd-admin-crud-auth-mern-master/frontend/src/components/DeleteModal/index.jsx"],"names":["React","useEffect","useState","Modal","useDispatch","useSelector","crud","useCrudContext","selectDeletedItem","valueByString","DeleteModal","config","entity","entityDisplayLabels","deleteMessage","modalTitle","dispatch","current","isLoading","isSuccess","state","crudContextAction","isModalOpen","modal","displayItem","setDisplayItem","close","list","resetAction","labels","map","x","join","handleOk","id","_id","delete","handleCancel"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,MAAtB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,eAAe,SAASC,WAAT,OAAiC;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AAC9C,MAAI;AACFC,IAAAA,MADE;AAEFC,IAAAA,mBAFE;AAGFC,IAAAA,aAAa,GAAG,uBAHd;AAIFC,IAAAA,UAAU,GAAG;AAJX,MAKAJ,MALJ;AAMA,QAAMK,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAAoCd,WAAW,CAACG,iBAAD,CAArD;AACA,QAAM;AAAEY,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA+Bd,cAAc,EAAnD;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAkBF,KAAxB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYF,iBAAlB;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,EAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,SAAJ,EAAe;AACbI,MAAAA,KAAK,CAACG,KAAN;AACAV,MAAAA,QAAQ,CAACV,IAAI,CAACqB,IAAL,CAAUf,MAAV,CAAD,CAAR;AACAI,MAAAA,QAAQ,CAACV,IAAI,CAACsB,WAAL,CAAiBhB,MAAjB,CAAD,CAAR;AACD;;AACD,QAAIK,OAAJ,EAAa;AACX,UAAIY,MAAM,GAAGhB,mBAAmB,CAC7BiB,GADU,CACLC,CAAD,IAAOtB,aAAa,CAACQ,OAAD,EAAUc,CAAV,CADd,EAEVC,IAFU,CAEL,GAFK,CAAb;AAIAP,MAAAA,cAAc,CAACI,MAAD,CAAd;AACD;AACF,GAbQ,EAaN,CAACV,SAAD,EAAYF,OAAZ,CAbM,CAAT;;AAeA,QAAMgB,QAAQ,GAAG,MAAM;AACrB,UAAMC,EAAE,GAAGjB,OAAO,CAACkB,GAAnB;AACAnB,IAAAA,QAAQ,CAACV,IAAI,CAAC8B,MAAL,CAAYxB,MAAZ,EAAoBsB,EAApB,CAAD,CAAR;AACD,GAHD;;AAIA,QAAMG,YAAY,GAAG,MAAM;AACzB,QAAI,CAACnB,SAAL,EAAgBK,KAAK,CAACG,KAAN;AACjB,GAFD;;AAGA,sBACE,QAAC,KAAD;AACE,IAAA,KAAK,EAAEX,UADT;AAEE,IAAA,OAAO,EAAEO,WAFX;AAGE,IAAA,IAAI,EAAEW,QAHR;AAIE,IAAA,QAAQ,EAAEI,YAJZ;AAKE,IAAA,cAAc,EAAEnB,SALlB;AAAA,2BAOE;AAAA,iBACGJ,aADH,EAEGU,WAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAlDuBd,W;UAOLN,W,EACyBC,W,EACLE,c;;;KATfG,W","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Modal } from \"antd\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectDeletedItem } from \"@/redux/crud/selectors\";\nimport { valueByString } from \"@/utils/helpers\";\n\nexport default function DeleteModal({ config }) {\n  let {\n    entity,\n    entityDisplayLabels,\n    deleteMessage = \"Do you want delete : \",\n    modalTitle = \"Remove Item\",\n  } = config;\n  const dispatch = useDispatch();\n  const { current, isLoading, isSuccess } = useSelector(selectDeletedItem);\n  const { state, crudContextAction } = useCrudContext();\n  const { isModalOpen } = state;\n  const { modal } = crudContextAction;\n  const [displayItem, setDisplayItem] = useState(\"\");\n\n  useEffect(() => {\n    if (isSuccess) {\n      modal.close();\n      dispatch(crud.list(entity));\n      dispatch(crud.resetAction(entity));\n    }\n    if (current) {\n      let labels = entityDisplayLabels\n        .map((x) => valueByString(current, x))\n        .join(\" \");\n\n      setDisplayItem(labels);\n    }\n  }, [isSuccess, current]);\n\n  const handleOk = () => {\n    const id = current._id;\n    dispatch(crud.delete(entity, id));\n  };\n  const handleCancel = () => {\n    if (!isLoading) modal.close();\n  };\n  return (\n    <Modal\n      title={modalTitle}\n      visible={isModalOpen}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      confirmLoading={isLoading}\n    >\n      <p>\n        {deleteMessage}\n        {displayItem}\n      </p>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}