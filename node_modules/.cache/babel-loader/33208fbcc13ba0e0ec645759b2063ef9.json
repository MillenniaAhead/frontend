{"ast":null,"code":"import * as actionTypes from \"./types\";\nimport { request } from \"@/request\";\nexport const crud = {\n  resetState: () => async dispatch => {\n    dispatch({\n      type: actionTypes.RESET_STATE\n    });\n  },\n  resetAction: actionType => async dispatch => {\n    dispatch({\n      type: actionTypes.RESET_ACTION,\n      keyState: actionType,\n      payload: null\n    });\n  },\n  currentItem: data => async dispatch => {\n    dispatch({\n      type: actionTypes.CURRENT_ITEM,\n      payload: {\n        ...data\n      }\n    });\n  },\n  currentAction: (actionType, data) => async dispatch => {\n    dispatch({\n      type: actionTypes.CURRENT_ACTION,\n      keyState: actionType,\n      payload: {\n        ...data\n      }\n    });\n  },\n  list: function (entity) {\n    let currentPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return async dispatch => {\n      dispatch({\n        type: actionTypes.REQUEST_LOADING,\n        keyState: \"list\",\n        payload: null\n      });\n      let data = await request.list(entity, {\n        page: currentPage\n      });\n      if (data.success === true) {\n        const result = {\n          items: data.result,\n          pagination: {\n            current: parseInt(data.pagination.page, 10),\n            pageSize: 10,\n            total: parseInt(data.pagination.count, 10)\n          }\n        };\n        dispatch({\n          type: actionTypes.REQUEST_SUCCESS,\n          keyState: \"list\",\n          payload: result\n        });\n      } else {\n        dispatch({\n          type: actionTypes.REQUEST_FAILED,\n          keyState: \"list\",\n          payload: null\n        });\n      }\n    };\n  },\n  create: (entity, jsonData) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"create\",\n      payload: null\n    });\n    console.log(\"jsonData action redux\", jsonData);\n    let data = await request.create(entity, jsonData);\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"create\",\n        payload: data.result\n      });\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"create\",\n        payload: null\n      });\n    }\n  },\n  read: (entity, itemId) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"read\",\n      payload: null\n    });\n    let data = await request.read(entity, itemId);\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result\n      });\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"read\",\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"read\",\n        payload: null\n      });\n    }\n  },\n  update: (entity, itemId, jsonData) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"update\",\n      payload: null\n    });\n    let data = await request.update(entity, itemId, jsonData);\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"update\",\n        payload: data.result\n      });\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"update\",\n        payload: null\n      });\n    }\n  },\n  delete: (entity, itemId) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"delete\",\n      payload: null\n    });\n    let data = await request.delete(entity, itemId);\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"delete\",\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"delete\",\n        payload: null\n      });\n    }\n  },\n  search: (entity, source, option) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"search\",\n      payload: null\n    });\n    source.cancel();\n    source = request.source();\n    let data = await request.search(entity, source, option);\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"search\",\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"search\",\n        payload: null\n      });\n    }\n  }\n};","map":{"version":3,"names":["actionTypes","request","crud","resetState","dispatch","type","RESET_STATE","resetAction","actionType","RESET_ACTION","keyState","payload","currentItem","data","CURRENT_ITEM","currentAction","CURRENT_ACTION","list","entity","currentPage","REQUEST_LOADING","page","success","result","items","pagination","current","parseInt","pageSize","total","count","REQUEST_SUCCESS","REQUEST_FAILED","create","jsonData","console","log","read","itemId","update","delete","search","source","option","cancel"],"sources":["F:/outletcontrol/frontend/src/redux/crud/actions.js"],"sourcesContent":["import * as actionTypes from \"./types\";\r\nimport { request } from \"@/request\";\r\n\r\nexport const crud = {\r\n  resetState: () => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.RESET_STATE,\r\n    });\r\n  },\r\n  resetAction: (actionType) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.RESET_ACTION,\r\n      keyState: actionType,\r\n      payload: null,\r\n    });\r\n  },\r\n  currentItem: (data) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.CURRENT_ITEM,\r\n      payload: { ...data },\r\n    });\r\n  },\r\n  currentAction: (actionType, data) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.CURRENT_ACTION,\r\n      keyState: actionType,\r\n      payload: { ...data },\r\n    });\r\n  },\r\n  list: (entity, currentPage = 1) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"list\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.list(entity, { page: currentPage });\r\n\r\n    if (data.success === true) {\r\n      const result = {\r\n        items: data.result,\r\n        pagination: {\r\n          current: parseInt(data.pagination.page, 10),\r\n          pageSize: 10,\r\n          total: parseInt(data.pagination.count, 10),\r\n        },\r\n      };\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"list\",\r\n        payload: result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"list\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  create: (entity, jsonData) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"create\",\r\n      payload: null,\r\n    });\r\n    console.log(\"jsonData action redux\", jsonData);\r\n    let data = await request.create(entity, jsonData);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"create\",\r\n        payload: data.result,\r\n      });\r\n\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"create\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  read: (entity, itemId) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"read\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.read(entity, itemId);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.result,\r\n      });\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"read\",\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"read\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  update: (entity, itemId, jsonData) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"update\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.update(entity, itemId, jsonData);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"update\",\r\n        payload: data.result,\r\n      });\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"update\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n\r\n  delete: (entity, itemId) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"delete\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.delete(entity, itemId);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"delete\",\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"delete\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n\r\n  search: (entity, source, option) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"search\",\r\n      payload: null,\r\n    });\r\n\r\n    source.cancel();\r\n\r\n    source = request.source();\r\n    let data = await request.search(entity, source, option);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"search\",\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"search\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}