{"ast":null,"code":"import { notification } from \"antd\";\nimport codeMessage from \"./codeMessage\";\nconst successHandler = function (response) {\n  let typeNotification = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!response.data.result) {\n    response = {\n      ...response,\n      status: 404,\n      url: null,\n      data: {\n        success: false,\n        result: null\n      }\n    };\n  }\n  const {\n    data\n  } = response;\n  if (data.success === false) {\n    const message = data && data.message;\n    const errorText = message || codeMessage[response.status];\n    const {\n      status\n    } = response;\n    notification.config({\n      duration: 20\n    });\n    notification.error({\n      message: `Request error ${status}`,\n      description: errorText\n    });\n  } else {\n    const message = data && data.message;\n    const successText = message || codeMessage[response.status];\n    const {\n      status\n    } = response;\n    // notification.config({\n    //   duration: 20,\n    // });\n    // notification.success({\n    //   message: `Request success`,\n    //   description: successText,\n    // });\n  }\n\n  return data;\n};\nexport default successHandler;","map":{"version":3,"names":["notification","codeMessage","successHandler","response","typeNotification","data","result","status","url","success","message","errorText","config","duration","error","description","successText"],"sources":["F:/outletcontrol/frontend/src/request/successHandler.js"],"sourcesContent":["import { notification } from \"antd\";\r\n\r\nimport codeMessage from \"./codeMessage\";\r\n\r\nconst successHandler = (response, typeNotification = {}) => {\r\n  if (!response.data.result) {\r\n    response = {\r\n      ...response,\r\n      status: 404,\r\n      url: null,\r\n      data: {\r\n        success: false,\r\n        result: null,\r\n      },\r\n    };\r\n  }\r\n  const { data } = response;\r\n  if (data.success === false) {\r\n    const message = data && data.message;\r\n    const errorText = message || codeMessage[response.status];\r\n    const { status } = response;\r\n    notification.config({\r\n      duration: 20,\r\n    });\r\n    notification.error({\r\n      message: `Request error ${status}`,\r\n      description: errorText,\r\n    });\r\n  } else {\r\n    const message = data && data.message;\r\n    const successText = message || codeMessage[response.status];\r\n    const { status } = response;\r\n    // notification.config({\r\n    //   duration: 20,\r\n    // });\r\n    // notification.success({\r\n    //   message: `Request success`,\r\n    //   description: successText,\r\n    // });\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport default successHandler;\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,MAAM;AAEnC,OAAOC,WAAW,MAAM,eAAe;AAEvC,MAAMC,cAAc,GAAG,UAACC,QAAQ,EAA4B;EAAA,IAA1BC,gBAAgB,uEAAG,CAAC,CAAC;EACrD,IAAI,CAACD,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;IACzBH,QAAQ,GAAG;MACT,GAAGA,QAAQ;MACXI,MAAM,EAAE,GAAG;MACXC,GAAG,EAAE,IAAI;MACTH,IAAI,EAAE;QACJI,OAAO,EAAE,KAAK;QACdH,MAAM,EAAE;MACV;IACF,CAAC;EACH;EACA,MAAM;IAAED;EAAK,CAAC,GAAGF,QAAQ;EACzB,IAAIE,IAAI,CAACI,OAAO,KAAK,KAAK,EAAE;IAC1B,MAAMC,OAAO,GAAGL,IAAI,IAAIA,IAAI,CAACK,OAAO;IACpC,MAAMC,SAAS,GAAGD,OAAO,IAAIT,WAAW,CAACE,QAAQ,CAACI,MAAM,CAAC;IACzD,MAAM;MAAEA;IAAO,CAAC,GAAGJ,QAAQ;IAC3BH,YAAY,CAACY,MAAM,CAAC;MAClBC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACFb,YAAY,CAACc,KAAK,CAAC;MACjBJ,OAAO,EAAG,iBAAgBH,MAAO,EAAC;MAClCQ,WAAW,EAAEJ;IACf,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,MAAMD,OAAO,GAAGL,IAAI,IAAIA,IAAI,CAACK,OAAO;IACpC,MAAMM,WAAW,GAAGN,OAAO,IAAIT,WAAW,CAACE,QAAQ,CAACI,MAAM,CAAC;IAC3D,MAAM;MAAEA;IAAO,CAAC,GAAGJ,QAAQ;IAC3B;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEA,OAAOE,IAAI;AACb,CAAC;AAED,eAAeH,cAAc"},"metadata":{},"sourceType":"module"}